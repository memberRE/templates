#include<iostream>
#include<cstring>
#include<algorithm>
#include<cstdio>
using namespace std;
int dp[1010][1010][2],w[1010],sum[1010][1010],lig[1010],n,v;
int su(int x,int y)
{
	if(sum[x][y]!=0) return sum[x][y];
	int s1=0,s2=0;
	for(int i=x-1;i>=1;i--) s1+=w[i];
	for(int i=y+1;i<=n;i++) s2+=w[i];
	return sum[x][y]=s1+s2; 
}
int mfs(int s,int e,int q){
	if(s==v and e==v)  return 0;
	if(dp[s][e][q]!=0) return dp[s][e][q];
	if(q==0){
		if(e==v) {
			return dp[s][e][q]=mfs(s+1,e,0)+su(s+1,e)*(lig[s+1]-lig[s]);
		}
	     if(s==v) return 199999999;
		 if(s<v and e>v) {//cout<<min(mfs(s+1,e,0)+su(s+1,e)*(lig[s+1]-lig[s]),mfs(s+1,e,1)+su(s+1,e)*(lig[e]-lig[s]))<<endl; 
		 	return dp[s][e][q]=min(mfs(s+1,e,0)+su(s+1,e)*(lig[s+1]-lig[s]),mfs(s+1,e,1)+su(s+1,e)*(lig[e]-lig[s]));   
		 }
		 
	}
	if(q==1 ){
		if(e==v)  return 199999999;
       if(s==v){
       	return dp[s][e][q]=mfs(s,e-1,1)+(lig[e]-lig[e-1])*su(s,e-1);
       } 
	   if(s<v and e>v)    
	   return	 dp[s][e][q]=min(mfs(s,e-1,1)+su(s,e-1)*(lig[e]-lig[e-1]),mfs(s,e-1,0)+su(s,e-1)*(lig[e]-lig[s]));   
	}
	
}
int main()
{memset(dp,0,sizeof(dp));
memset(sum,0,sizeof(sum));
memset(lig,0,sizeof(lig));
memset(w,0,sizeof(w));
           cin>>n>>v;
           for(int i=1;i<=n;i++)
           	cin>>lig[i]>>w[i];;
         /*  for(int i=1;i<=n;i++)
            for(int j=i;j<=n;j++)
            {
               	if(i==j) sum[i][j]=w[j];
                 else     sum[i][j]=sum[i][j-1]+w[j];
            }*/
          cout<<min(mfs(1,n,0),mfs(1,n,1))<<endl;
           return 0;

}